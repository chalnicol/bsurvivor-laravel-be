<?php

namespace App\Mail;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Mail\Mailable;
use Illuminate\Mail\Mailables\Content;
use Illuminate\Mail\Mailables\Envelope;
use Illuminate\Queue\SerializesModels;

class BracketEntryUpdatedMailable extends Mailable
{
    use Queueable, SerializesModels;

    public string $entryUrl; // Property to hold the frontend reset URL
    public string $challengeName; // Optional: To personalize the email (e.g., "Hello, [User Name]")
    public string $username;
    /**
     * Create a new message instance.
     *
     * @param string $resetToken The password reset token generated by Laravel
     * @param string $userEmail The email of the user requesting the reset
     * @param string $userName (Optional) The user's name, if available
     * @return void
     */
    public function __construct(string $userName, string $challengeName, string $url)
    {
        // Construct the frontend reset URL
        // Ensure config('app.frontend_url') is set in .env and config/app.php
        //$this->entry = config('app.frontend_url') . '/reset-password?token=' . $resetToken . '&email=' . urlencode($userEmail);
        $this->userName = $userName; // Default to 'User' if name is not provided
        $this->url = $url;
        $this->challengeName = $challengeName;
    }

    /**
     * Get the message envelope.
     */
    public function envelope(): Envelope
    {
        return new Envelope(
            subject: '"'. $this->challengeName . '" Bracket Challenge has been updated - ' . config('app.name'), // Dynamic subject
        );
    }

    /**
     * Get the message content definition.
     */
    public function content(): Content
    {
        // return new Content(
        //     view: 'view.name',
        // );
        return new Content(
            // markdown: 'emails.password-reset', // Use a Blade Markdown view
            view: 'emails.custom-bracket-update',
            with: [
                'url' => $this->url,
                'userName' => $this->userName,
                'challengeName' => $this->challengeName,
            ]
        );
    }

    /**
     * Get the attachments for the message.
     *
     * @return array<int, \Illuminate\Mail\Mailables\Attachment>
     */
    public function attachments(): array
    {
        return [];
    }
}
